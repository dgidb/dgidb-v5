{"version":3,"file":"static/js/862.47cec7f7.chunk.js","mappings":"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","sources":["../node_modules/@graphiql/codemirror-graphql/esm/utils/jsonParse.js","../node_modules/@graphiql/codemirror-graphql/esm/variables/lint.js"],"sourcesContent":["export default function jsonParse(str) {\n    string = str;\n    strLen = str.length;\n    start = end = lastEnd = -1;\n    ch();\n    lex();\n    const ast = parseObj();\n    expect('EOF');\n    return ast;\n}\nlet string;\nlet strLen;\nlet start;\nlet end;\nlet lastEnd;\nlet code;\nlet kind;\nfunction parseObj() {\n    const nodeStart = start;\n    const members = [];\n    expect('{');\n    if (!skip('}')) {\n        do {\n            members.push(parseMember());\n        } while (skip(','));\n        expect('}');\n    }\n    return {\n        kind: 'Object',\n        start: nodeStart,\n        end: lastEnd,\n        members,\n    };\n}\nfunction parseMember() {\n    const nodeStart = start;\n    const key = kind === 'String' ? curToken() : null;\n    expect('String');\n    expect(':');\n    const value = parseVal();\n    return {\n        kind: 'Member',\n        start: nodeStart,\n        end: lastEnd,\n        key,\n        value,\n    };\n}\nfunction parseArr() {\n    const nodeStart = start;\n    const values = [];\n    expect('[');\n    if (!skip(']')) {\n        do {\n            values.push(parseVal());\n        } while (skip(','));\n        expect(']');\n    }\n    return {\n        kind: 'Array',\n        start: nodeStart,\n        end: lastEnd,\n        values,\n    };\n}\nfunction parseVal() {\n    switch (kind) {\n        case '[':\n            return parseArr();\n        case '{':\n            return parseObj();\n        case 'String':\n        case 'Number':\n        case 'Boolean':\n        case 'Null':\n            const token = curToken();\n            lex();\n            return token;\n    }\n    expect('Value');\n}\nfunction curToken() {\n    return { kind, start, end, value: JSON.parse(string.slice(start, end)) };\n}\nfunction expect(str) {\n    if (kind === str) {\n        lex();\n        return;\n    }\n    let found;\n    if (kind === 'EOF') {\n        found = '[end of file]';\n    }\n    else if (end - start > 1) {\n        found = '`' + string.slice(start, end) + '`';\n    }\n    else {\n        const match = string.slice(start).match(/^.+?\\b/);\n        found = '`' + (match ? match[0] : string[start]) + '`';\n    }\n    throw syntaxError(`Expected ${str} but found ${found}.`);\n}\nexport class JSONSyntaxError extends Error {\n    constructor(message, position) {\n        super(message);\n        this.position = position;\n    }\n}\nfunction syntaxError(message) {\n    return new JSONSyntaxError(message, { start, end });\n}\nfunction skip(k) {\n    if (kind === k) {\n        lex();\n        return true;\n    }\n}\nfunction ch() {\n    if (end < strLen) {\n        end++;\n        code = end === strLen ? 0 : string.charCodeAt(end);\n    }\n    return code;\n}\nfunction lex() {\n    lastEnd = end;\n    while (code === 9 || code === 10 || code === 13 || code === 32) {\n        ch();\n    }\n    if (code === 0) {\n        kind = 'EOF';\n        return;\n    }\n    start = end;\n    switch (code) {\n        case 34:\n            kind = 'String';\n            return readString();\n        case 45:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n            kind = 'Number';\n            return readNumber();\n        case 102:\n            if (string.slice(start, start + 5) !== 'false') {\n                break;\n            }\n            end += 4;\n            ch();\n            kind = 'Boolean';\n            return;\n        case 110:\n            if (string.slice(start, start + 4) !== 'null') {\n                break;\n            }\n            end += 3;\n            ch();\n            kind = 'Null';\n            return;\n        case 116:\n            if (string.slice(start, start + 4) !== 'true') {\n                break;\n            }\n            end += 3;\n            ch();\n            kind = 'Boolean';\n            return;\n    }\n    kind = string[start];\n    ch();\n}\nfunction readString() {\n    ch();\n    while (code !== 34 && code > 31) {\n        if (code === 92) {\n            code = ch();\n            switch (code) {\n                case 34:\n                case 47:\n                case 92:\n                case 98:\n                case 102:\n                case 110:\n                case 114:\n                case 116:\n                    ch();\n                    break;\n                case 117:\n                    ch();\n                    readHex();\n                    readHex();\n                    readHex();\n                    readHex();\n                    break;\n                default:\n                    throw syntaxError('Bad character escape sequence.');\n            }\n        }\n        else if (end === strLen) {\n            throw syntaxError('Unterminated string.');\n        }\n        else {\n            ch();\n        }\n    }\n    if (code === 34) {\n        ch();\n        return;\n    }\n    throw syntaxError('Unterminated string.');\n}\nfunction readHex() {\n    if ((code >= 48 && code <= 57) ||\n        (code >= 65 && code <= 70) ||\n        (code >= 97 && code <= 102)) {\n        return ch();\n    }\n    throw syntaxError('Expected hexadecimal digit.');\n}\nfunction readNumber() {\n    if (code === 45) {\n        ch();\n    }\n    if (code === 48) {\n        ch();\n    }\n    else {\n        readDigits();\n    }\n    if (code === 46) {\n        ch();\n        readDigits();\n    }\n    if (code === 69 || code === 101) {\n        code = ch();\n        if (code === 43 || code === 45) {\n            ch();\n        }\n        readDigits();\n    }\n}\nfunction readDigits() {\n    if (code < 48 || code > 57) {\n        throw syntaxError('Expected decimal digit.');\n    }\n    do {\n        ch();\n    } while (code >= 48 && code <= 57);\n}\n//# sourceMappingURL=jsonParse.js.map","import CodeMirror from 'codemirror';\nimport { GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, GraphQLScalarType, } from 'graphql';\nimport jsonParse, { JSONSyntaxError, } from '../utils/jsonParse';\nCodeMirror.registerHelper('lint', 'graphql-variables', (text, options, editor) => {\n    if (!text) {\n        return [];\n    }\n    let ast;\n    try {\n        ast = jsonParse(text);\n    }\n    catch (error) {\n        if (error instanceof JSONSyntaxError) {\n            return [lintError(editor, error.position, error.message)];\n        }\n        throw error;\n    }\n    const { variableToType } = options;\n    if (!variableToType) {\n        return [];\n    }\n    return validateVariables(editor, variableToType, ast);\n});\nfunction validateVariables(editor, variableToType, variablesAST) {\n    var _a;\n    const errors = [];\n    for (const member of variablesAST.members) {\n        if (member) {\n            const variableName = (_a = member.key) === null || _a === void 0 ? void 0 : _a.value;\n            const type = variableToType[variableName];\n            if (type) {\n                for (const [node, message] of validateValue(type, member.value)) {\n                    errors.push(lintError(editor, node, message));\n                }\n            }\n            else {\n                errors.push(lintError(editor, member.key, `Variable \"$${variableName}\" does not appear in any GraphQL query.`));\n            }\n        }\n    }\n    return errors;\n}\nfunction validateValue(type, valueAST) {\n    if (!type || !valueAST) {\n        return [];\n    }\n    if (type instanceof GraphQLNonNull) {\n        if (valueAST.kind === 'Null') {\n            return [[valueAST, `Type \"${type}\" is non-nullable and cannot be null.`]];\n        }\n        return validateValue(type.ofType, valueAST);\n    }\n    if (valueAST.kind === 'Null') {\n        return [];\n    }\n    if (type instanceof GraphQLList) {\n        const itemType = type.ofType;\n        if (valueAST.kind === 'Array') {\n            const values = valueAST.values || [];\n            return mapCat(values, item => validateValue(itemType, item));\n        }\n        return validateValue(itemType, valueAST);\n    }\n    if (type instanceof GraphQLInputObjectType) {\n        if (valueAST.kind !== 'Object') {\n            return [[valueAST, `Type \"${type}\" must be an Object.`]];\n        }\n        const providedFields = Object.create(null);\n        const fieldErrors = mapCat(valueAST.members, member => {\n            var _a;\n            const fieldName = (_a = member === null || member === void 0 ? void 0 : member.key) === null || _a === void 0 ? void 0 : _a.value;\n            providedFields[fieldName] = true;\n            const inputField = type.getFields()[fieldName];\n            if (!inputField) {\n                return [\n                    [\n                        member.key,\n                        `Type \"${type}\" does not have a field \"${fieldName}\".`,\n                    ],\n                ];\n            }\n            const fieldType = inputField ? inputField.type : undefined;\n            return validateValue(fieldType, member.value);\n        });\n        for (const fieldName of Object.keys(type.getFields())) {\n            const field = type.getFields()[fieldName];\n            if (!providedFields[fieldName] &&\n                field.type instanceof GraphQLNonNull &&\n                !field.defaultValue) {\n                fieldErrors.push([\n                    valueAST,\n                    `Object of type \"${type}\" is missing required field \"${fieldName}\".`,\n                ]);\n            }\n        }\n        return fieldErrors;\n    }\n    if ((type.name === 'Boolean' && valueAST.kind !== 'Boolean') ||\n        (type.name === 'String' && valueAST.kind !== 'String') ||\n        (type.name === 'ID' &&\n            valueAST.kind !== 'Number' &&\n            valueAST.kind !== 'String') ||\n        (type.name === 'Float' && valueAST.kind !== 'Number') ||\n        (type.name === 'Int' &&\n            (valueAST.kind !== 'Number' || (valueAST.value | 0) !== valueAST.value))) {\n        return [[valueAST, `Expected value of type \"${type}\".`]];\n    }\n    if ((type instanceof GraphQLEnumType || type instanceof GraphQLScalarType) &&\n        ((valueAST.kind !== 'String' &&\n            valueAST.kind !== 'Number' &&\n            valueAST.kind !== 'Boolean' &&\n            valueAST.kind !== 'Null') ||\n            isNullish(type.parseValue(valueAST.value)))) {\n        return [[valueAST, `Expected value of type \"${type}\".`]];\n    }\n    return [];\n}\nfunction lintError(editor, node, message) {\n    return {\n        message,\n        severity: 'error',\n        type: 'validation',\n        from: editor.posFromIndex(node.start),\n        to: editor.posFromIndex(node.end),\n    };\n}\nfunction isNullish(value) {\n    return value === null || value === undefined || value !== value;\n}\nfunction mapCat(array, mapper) {\n    return Array.prototype.concat.apply([], array.map(mapper));\n}\n//# sourceMappingURL=lint.js.map"],"names":["jsonParse","str","string","strLen","length","start","end","lastEnd","ch","lex","ast","parseObj","expect","code","kind","nodeStart","members","skip","push","parseMember","key","curToken","value","parseVal","parseArr","values","token","JSON","parse","slice","found","match","syntaxError","concat","__name","JSONSyntaxError","Error","constructor","message","position","super","this","k","charCodeAt","readString","readNumber","readHex","readDigits","validateVariables","editor","variableToType","variablesAST","_a","errors","member","variableName","type","node","validateValue","lintError","valueAST","GraphQLNonNull","ofType","GraphQLList","itemType","mapCat","item","GraphQLInputObjectType","providedFields","Object","create","fieldErrors","fieldName","inputField","getFields","keys","field","defaultValue","name","GraphQLEnumType","GraphQLScalarType","isNullish","parseValue","severity","from","posFromIndex","to","array","mapper","Array","prototype","apply","map","CodeMirror","registerHelper","text","options","error"],"sourceRoot":""}