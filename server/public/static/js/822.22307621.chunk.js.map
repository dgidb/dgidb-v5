{"version":3,"file":"static/js/822.22307621.chunk.js","mappings":"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","sources":["../node_modules/node_modules/codemirror/addon/search/searchcursor.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureFlags(regexp, flags) {\n    var current = regexpFlags(regexp), target = current\n    for (var i = 0; i < flags.length; i++) if (target.indexOf(flags.charAt(i)) == -1)\n      target += flags.charAt(i)\n    return current == target ? regexp : new RegExp(regexp.source, target)\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        if (line > last) break\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp, endMargin) {\n    var match, from = 0\n    while (from <= string.length) {\n      regexp.lastIndex = from\n      var newMatch = regexp.exec(string)\n      if (!newMatch) break\n      var end = newMatch.index + newMatch[0].length\n      if (end > string.length - endMargin) break\n      if (!match || end > match.index + match[0].length)\n        match = newMatch\n      from = newMatch.index + 1\n    }\n    return match\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      var match = lastMatchIn(string, regexp, ch < 0 ? 0 : string.length - ch)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpBackward(doc, regexp, start)\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunkSize = 1, endMargin = doc.getLine(start.line).length - start.ch\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunkSize && line >= first; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine : curLine + \"\\n\" + string\n      }\n      chunkSize *= 2\n\n      var match = lastMatchIn(string, regexp, endMargin)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (endString.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.afterEmptyMatch = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureFlags(query, \"gm\")\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var head = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      if (this.afterEmptyMatch && this.atOccurrence) {\n        // do not return the same 0 width match twice\n        head = Pos(head.line, head.ch)\n        if (reverse) {\n          head.ch--;\n          if (head.ch < 0) {\n            head.line--;\n            head.ch = (this.doc.getLine(head.line) || \"\").length;\n          }\n        } else {\n          head.ch++;\n          if (head.ch > (this.doc.getLine(head.line) || \"\").length) {\n            head.ch = 0;\n            head.line++;\n          }\n        }\n        if (CodeMirror.cmpPos(head, this.doc.clipPos(head)) != 0) {\n           return this.atOccurrence = false\n        }\n      }\n      var result = this.matches(reverse, head)\n      this.afterEmptyMatch = result && CodeMirror.cmpPos(result.from, result.to) == 0\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n"],"names":["CodeMirror","doFold","noFold","Pos","regexp","flags","ignoreCase","global","multiline","current","regexpFlags","target","i","length","indexOf","charAt","RegExp","source","test","doc","start","ensureFlags","line","ch","last","lastLine","lastIndex","string","getLine","match","exec","from","index","to","maybeMultiline","searchRegexpForward","chunk","curLine","before","slice","split","inside","startLine","startCh","endMargin","newMatch","end","first","firstLine","lastMatchIn","searchRegexpBackward","chunkSize","orig","folded","pos","foldFunc","min","max","Math","mid","len","query","caseFold","fold","lines","search","found","adjustPos","cutFrom","endString","lastIndexOf","top","topString","options","this","atOccurrence","afterEmptyMatch","clipPos","matches","reverse","pos2","searchStringBackward","searchStringForward","searchRegexpBackwardMultiline","searchRegexpForwardMultiline","__name","String","prototype","normalize","str","toLowerCase","SearchCursor","findNext","find","findPrevious","head","cmpPos","result","replace","newText","origin","splitLines","replaceRange","defineExtension","defineDocExtension","ranges","cur","getSearchCursor","getCursor","push","anchor","setSelections","mod","require$$0"],"sourceRoot":""}