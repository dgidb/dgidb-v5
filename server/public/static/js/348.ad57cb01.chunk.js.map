{"version":3,"file":"static/js/348.ad57cb01.chunk.js","mappings":"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","sources":["../node_modules/node_modules/codemirror/mode/javascript/javascript.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var trackScope = parserConfig.trackScope !== false\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    if (!trackScope) return false\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (!trackScope) return\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  pushcontext.lex = pushblockcontext.lex = true\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") { return pass(quasiType, afterType); }\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\") return cont(classfield)\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null))\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/x-json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/manifest+json\", { name: \"javascript\", json: true })\nCodeMirror.defineMIME(\"application/ld+json\", { name: \"javascript\", jsonld: true });\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n"],"names":["CodeMirror","codemirror","exports","defineMode","config","parserConfig","type","content","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","trackScope","isTS","typescript","wordRE","wordCharacters","keywords","kw","type2","style","__name","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","readRegexp","stream","next","escaped","inSet","ret","tp","cont2","tokenBase","state","ch","tokenize","tokenString","match","test","eat","tokenComment","skipToEnd","expressionAllowed","current","tokenQuasi","peek","eatWhile","string","slice","start","lexical","word","lastType","propertyIsEnumerable","quote","maybeEnd","brackets","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","JSLexical","indented","column","align","prev","info","this","inScope","varname","v","localVars","name","cx2","context","vars","parseJS","content2","cc","cx","marked","hasOwnProperty","length","pop","expression","statement","lex","pass","i","arguments","push","cont","apply","inList","list","register","block","newContext","registerVarScoped","Var","globalVars","inner","Context","isModifier","block2","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","poplex","expect","wanted","exp","value","vardef","parenExpr","maybeexpression","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","classExpression","arrayLiteral","contCommasep","objprop","quasi","maybeTarget","me","expr","property","backUp","continueQuasi","targetNoComma","target","maybeTypeArgs","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","type3","value2","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","functiondecl","continueQuasiType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","isContinuedStatement","textAfter","startState","basecolumn","token","sol","indentation","eatSpace","Pass","top","firstChar","c","closing","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","StringStream","registerHelper","defineMIME"],"sourceRoot":""}