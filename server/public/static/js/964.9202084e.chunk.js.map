{"version":3,"file":"static/js/964.9202084e.chunk.js","mappings":"qIAAe,SAASA,EAAOC,EAAOC,GAClC,IAAIC,EAAIC,EACAC,EAAwBJ,EAAxBI,OAAQC,EAAgBL,EAAhBK,YAIhB,QAHeD,GAA4B,IAAlBA,EAAOE,OAE1BF,EAAOG,IAAI,KAAqC,QAA7BL,EAAKM,KAAKC,qBAAkC,IAAPP,OAAgB,EAASA,EAAGQ,KAAKT,IAAc,EAAI,GAD3GI,IAEW,KAA8B,QAAtBF,EAAKK,KAAKG,cAA2B,IAAPR,OAAgB,EAASA,EAAGS,aAAe,I,yBAN9EC,E,cAAAA,S,iGCGxBC,EAAAA,EAAAA,WAAsB,mBAAmB,SAAAH,GACrC,IAAMI,GAASC,EAAAA,EAAAA,GAAa,CACxBC,cAAe,SAAAC,GAAA,OAAUA,EAAOC,YAChCC,SAAUC,EACVC,WAAYC,EACZC,aAAc,CAAEC,QAASd,EAAOc,WAEpC,MAAO,CACHd,OAAAA,EACAe,WAAYX,EAAOW,WACnBC,MAAOZ,EAAOY,MACd5B,OAAAA,EAAAA,EACAU,cAAe,YACfmB,KAAM,QACNC,cAAe,CACXC,MAAO,SACPC,QAAS,YAIrB,IAAMV,EAAW,CACbW,YAAa,kBACbC,OAAQ,4DACRC,OAAQ,0DACRC,QAAS,oBAEPZ,EAAa,CACfa,SAAU,EAACC,EAAAA,EAAAA,GAAE,MAAMC,EAAAA,EAAAA,GAAK,SAASD,EAAAA,EAAAA,GAAE,OAAOA,EAAAA,EAAAA,GAAE,MAC5CE,MAAO,EAACC,EAAAA,EAAAA,GAAE,SAAU,QAAQH,EAAAA,EAAAA,GAAE,KAAM,SACpCI,MAHe,SAGTd,GACF,OAAQA,EAAMe,MAAA,IACL,SACD,MAAO,kBACN,SACD,MAAO,kBACN,cACD,OAAQf,EAAMgB,OAAA,IACL,IACD,MAAO,gBACN,IACD,MAAO,cAEf,OAAO,SACN,UACD,OAAQhB,EAAMgB,OAAA,IACL,WACA,QACD,MAAO,mBACN,OACD,MAAO,YAEf,OAAO,OAGnBC,YAAa,EAACJ,EAAAA,EAAAA,GAAE,SAAU,WAC1BK,YAAa,EAACL,EAAAA,EAAAA,GAAE,SAAU,WAC1BM,aAAc,EAACN,EAAAA,EAAAA,GAAE,UAAW,YAC5BO,UAAW,EAACP,EAAAA,EAAAA,GAAE,UAAW,YACzBQ,UAAW,EAACX,EAAAA,EAAAA,GAAE,MAAMC,EAAAA,EAAAA,GAAK,SAASD,EAAAA,EAAAA,GAAE,OAAOA,EAAAA,EAAAA,GAAE,MAC7CY,YAAa,EAACZ,EAAAA,EAAAA,GAAE,MAAMC,EAAAA,EAAAA,GAAK,eAAeD,EAAAA,EAAAA,GAAE,OAAOA,EAAAA,EAAAA,GAAE,MACrDa,YAAa,EAACV,EAAAA,EAAAA,GAAE,SAAU,aAAaH,EAAAA,EAAAA,GAAE,KAAM","sources":["../node_modules/@graphiql/codemirror-graphql/esm/utils/mode-indent.js","../node_modules/@graphiql/codemirror-graphql/esm/results/mode.js"],"sourcesContent":["export default function indent(state, textAfter) {\n    var _a, _b;\n    const { levels, indentLevel } = state;\n    const level = !levels || levels.length === 0\n        ? indentLevel\n        : levels.at(-1) - (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n    return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\n//# sourceMappingURL=mode-indent.js.map","import CodeMirror from 'codemirror';\nimport { list, t, onlineParser, p } from 'graphql-language-service';\nimport indent from '../utils/mode-indent';\nCodeMirror.defineMode('graphql-results', config => {\n    const parser = onlineParser({\n        eatWhitespace: stream => stream.eatSpace(),\n        lexRules: LexRules,\n        parseRules: ParseRules,\n        editorConfig: { tabSize: config.tabSize },\n    });\n    return {\n        config,\n        startState: parser.startState,\n        token: parser.token,\n        indent,\n        electricInput: /^\\s*[}\\]]/,\n        fold: 'brace',\n        closeBrackets: {\n            pairs: '[]{}\"\"',\n            explode: '[]{}',\n        },\n    };\n});\nconst LexRules = {\n    Punctuation: /^\\[|]|\\{|\\}|:|,/,\n    Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n    String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n    Keyword: /^true|false|null/,\n};\nconst ParseRules = {\n    Document: [p('{'), list('Entry', p(',')), p('}')],\n    Entry: [t('String', 'def'), p(':'), 'Value'],\n    Value(token) {\n        switch (token.kind) {\n            case 'Number':\n                return 'NumberValue';\n            case 'String':\n                return 'StringValue';\n            case 'Punctuation':\n                switch (token.value) {\n                    case '[':\n                        return 'ListValue';\n                    case '{':\n                        return 'ObjectValue';\n                }\n                return null;\n            case 'Keyword':\n                switch (token.value) {\n                    case 'true':\n                    case 'false':\n                        return 'BooleanValue';\n                    case 'null':\n                        return 'NullValue';\n                }\n                return null;\n        }\n    },\n    NumberValue: [t('Number', 'number')],\n    StringValue: [t('String', 'string')],\n    BooleanValue: [t('Keyword', 'builtin')],\n    NullValue: [t('Keyword', 'keyword')],\n    ListValue: [p('['), list('Value', p(',')), p(']')],\n    ObjectValue: [p('{'), list('ObjectField', p(',')), p('}')],\n    ObjectField: [t('String', 'property'), p(':'), 'Value'],\n};\n//# sourceMappingURL=mode.js.map"],"names":["indent","state","textAfter","_a","_b","levels","indentLevel","length","at","this","electricInput","test","config","indentUnit","__name","CodeMirror","parser","onlineParser","eatWhitespace","stream","eatSpace","lexRules","LexRules","parseRules","ParseRules","editorConfig","tabSize","startState","token","fold","closeBrackets","pairs","explode","Punctuation","Number","String","Keyword","Document","p","list","Entry","t","Value","kind","value","NumberValue","StringValue","BooleanValue","NullValue","ListValue","ObjectValue","ObjectField"],"sourceRoot":""}