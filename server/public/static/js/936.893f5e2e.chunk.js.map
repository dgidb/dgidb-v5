{"version":3,"file":"static/js/936.893f5e2e.chunk.js","mappings":"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","sources":["../node_modules/@graphiql/graphql-language-service/esm/utils/Range.js","../node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs","../node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs","../node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs","../node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs","../node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs","../node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs","../node_modules/graphql/language/predicates.mjs","../node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs","../node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs","../node_modules/graphql/validation/rules/KnownDirectivesRule.mjs","../node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs","../node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs","../node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs","../node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs","../node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs","../node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs","../node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs","../node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs","../node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs","../node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs","../node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs","../node_modules/graphql/validation/specifiedRules.mjs","../node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs","../node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs","../node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs","../node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs","../node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs","../node_modules/graphql/validation/rules/ScalarLeafsRule.mjs","../node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs","../node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs","../node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs","../node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs","../node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs","../node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs","../node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs","../node_modules/graphql/validation/ValidationContext.mjs","../node_modules/graphql/validation/validate.mjs","../node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs","../node_modules/@graphiql/graphql-language-service/esm/utils/validateWithCustomRules.js","../node_modules/@graphiql/graphql-language-service/esm/interface/getDiagnostics.js","../node_modules/@graphiql/codemirror-graphql/esm/lint.js"],"sourcesContent":["export class Range {\n    constructor(start, end) {\n        this.containsPosition = (position) => {\n            if (this.start.line === position.line) {\n                return this.start.character <= position.character;\n            }\n            if (this.end.line === position.line) {\n                return this.end.character >= position.character;\n            }\n            return this.start.line <= position.line && this.end.line >= position.line;\n        };\n        this.start = start;\n        this.end = end;\n    }\n    setStart(line, character) {\n        this.start = new Position(line, character);\n    }\n    setEnd(line, character) {\n        this.end = new Position(line, character);\n    }\n}\nexport class Position {\n    constructor(line, character) {\n        this.lessThanOrEqualTo = (position) => this.line < position.line ||\n            (this.line === position.line && this.character <= position.character);\n        this.line = line;\n        this.character = character;\n    }\n    setLine(line) {\n        this.line = line;\n    }\n    setCharacter(character) {\n        this.character = character;\n    }\n}\nexport function offsetToPosition(text, loc) {\n    const EOL = '\\n';\n    const buf = text.slice(0, loc);\n    const lines = buf.split(EOL).length - 1;\n    const lastLineIndex = buf.lastIndexOf(EOL);\n    return new Position(lines, loc - lastLineIndex - 1);\n}\nexport function locToRange(text, loc) {\n    const start = offsetToPosition(text, loc.start);\n    const end = offsetToPosition(text, loc.end);\n    return new Range(start, end);\n}\n//# sourceMappingURL=Range.js.map","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\nexport function LoneSchemaDefinitionRule(context) {\n  var _ref, _ref2, _oldSchema$astNode;\n\n  var oldSchema = context.getSchema();\n  var alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getSubscriptionType();\n  var schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition: function SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(new GraphQLError('Cannot define a new schema within a schema extension.', node));\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(new GraphQLError('Must provide only one schema definition.', node));\n      }\n\n      ++schemaDefinitionsCount;\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n    var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n\n    for (var _i2 = 0; _i2 < operationTypesNodes.length; _i2++) {\n      var operationType = operationTypesNodes[_i2];\n      var operation = operationType.operation;\n      var alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(new GraphQLError(\"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\"), operationType));\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(new GraphQLError(\"There can be only one \".concat(operation, \" type in schema.\"), [alreadyDefinedOperationType, operationType]));\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nexport function UniqueTypeNamesRule(context) {\n  var knownTypeNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n\n  function checkTypeName(node) {\n    var typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(new GraphQLError(\"Type \\\"\".concat(typeName, \"\\\" already exists in the schema. It cannot also be defined in this type definition.\"), node.name));\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(new GraphQLError(\"There can be only one type named \\\"\".concat(typeName, \"\\\".\"), [knownTypeNames[typeName], node.name]));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isEnumType } from \"../../type/definition.mjs\";\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    var typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];\n    var valueNames = knownValueNames[typeName];\n\n    for (var _i2 = 0; _i2 < valueNodes.length; _i2++) {\n      var valueDef = valueNodes[_i2];\n      var valueName = valueDef.name.value;\n      var existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(new GraphQLError(\"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), valueDef.name));\n      } else if (valueNames[valueName]) {\n        context.reportError(new GraphQLError(\"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" can only be defined once.\"), [valueNames[valueName], valueDef.name]));\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isObjectType, isInterfaceType, isInputObjectType } from \"../../type/definition.mjs\";\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    var typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n    var fieldNames = knownFieldNames[typeName];\n\n    for (var _i2 = 0; _i2 < fieldNodes.length; _i2++) {\n      var fieldDef = fieldNodes[_i2];\n      var fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), fieldDef.name));\n      } else if (fieldNames[fieldName]) {\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\"), [fieldNames[fieldName], fieldDef.name]));\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\nexport function UniqueDirectiveNamesRule(context) {\n  var knownDirectiveNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    DirectiveDefinition: function DirectiveDefinition(node) {\n      var directiveName = node.name.value;\n\n      if (schema !== null && schema !== void 0 && schema.getDirective(directiveName)) {\n        context.reportError(new GraphQLError(\"Directive \\\"@\".concat(directiveName, \"\\\" already exists in the schema. It cannot be redefined.\"), node.name));\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(new GraphQLError(\"There can be only one directive named \\\"@\".concat(directiveName, \"\\\".\"), [knownDirectiveNames[directiveName], node.name]));\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}\n","import { Kind } from \"./kinds.mjs\";\nexport function isDefinitionNode(node) {\n  return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);\n}\nexport function isExecutableDefinitionNode(node) {\n  return node.kind === Kind.OPERATION_DEFINITION || node.kind === Kind.FRAGMENT_DEFINITION;\n}\nexport function isSelectionNode(node) {\n  return node.kind === Kind.FIELD || node.kind === Kind.FRAGMENT_SPREAD || node.kind === Kind.INLINE_FRAGMENT;\n}\nexport function isValueNode(node) {\n  return node.kind === Kind.VARIABLE || node.kind === Kind.INT || node.kind === Kind.FLOAT || node.kind === Kind.STRING || node.kind === Kind.BOOLEAN || node.kind === Kind.NULL || node.kind === Kind.ENUM || node.kind === Kind.LIST || node.kind === Kind.OBJECT;\n}\nexport function isTypeNode(node) {\n  return node.kind === Kind.NAMED_TYPE || node.kind === Kind.LIST_TYPE || node.kind === Kind.NON_NULL_TYPE;\n}\nexport function isTypeSystemDefinitionNode(node) {\n  return node.kind === Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === Kind.DIRECTIVE_DEFINITION;\n}\nexport function isTypeDefinitionNode(node) {\n  return node.kind === Kind.SCALAR_TYPE_DEFINITION || node.kind === Kind.OBJECT_TYPE_DEFINITION || node.kind === Kind.INTERFACE_TYPE_DEFINITION || node.kind === Kind.UNION_TYPE_DEFINITION || node.kind === Kind.ENUM_TYPE_DEFINITION || node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION;\n}\nexport function isTypeSystemExtensionNode(node) {\n  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);\n}\nexport function isTypeExtensionNode(node) {\n  return node.kind === Kind.SCALAR_TYPE_EXTENSION || node.kind === Kind.OBJECT_TYPE_EXTENSION || node.kind === Kind.INTERFACE_TYPE_EXTENSION || node.kind === Kind.UNION_TYPE_EXTENSION || node.kind === Kind.ENUM_TYPE_EXTENSION || node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION;\n}\n","import didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isTypeDefinitionNode, isTypeSystemDefinitionNode, isTypeSystemExtensionNode } from \"../../language/predicates.mjs\";\nimport { specifiedScalarTypes } from \"../../type/scalars.mjs\";\nimport { introspectionTypes } from \"../../type/introspection.mjs\";\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */\nexport function KnownTypeNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  var definedTypes = Object.create(null);\n\n  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {\n    var def = _context$getDocument$2[_i2];\n\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  var typeNames = Object.keys(existingTypesMap).concat(Object.keys(definedTypes));\n  return {\n    NamedType: function NamedType(node, _1, parent, _2, ancestors) {\n      var typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n\n        var definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;\n        var isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && isStandardTypeName(typeName)) {\n          return;\n        }\n\n        var suggestedTypes = suggestionList(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);\n        context.reportError(new GraphQLError(\"Unknown type \\\"\".concat(typeName, \"\\\".\") + didYouMean(suggestedTypes), node));\n      }\n    }\n  };\n}\nvar standardTypeNames = [].concat(specifiedScalarTypes, introspectionTypes).map(function (type) {\n  return type.name;\n});\n\nfunction isStandardTypeName(typeName) {\n  return standardTypeNames.indexOf(typeName) !== -1;\n}\n\nfunction isSDLNode(value) {\n  return !Array.isArray(value) && (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value));\n}\n","var _defKindToExtKind;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport invariant from \"../../jsutils/invariant.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isTypeDefinitionNode } from \"../../language/predicates.mjs\";\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from \"../../type/definition.mjs\";\n\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\nexport function PossibleTypeExtensionsRule(context) {\n  var schema = context.getSchema();\n  var definedTypes = Object.create(null);\n\n  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {\n    var def = _context$getDocument$2[_i2];\n\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension\n  };\n\n  function checkExtension(node) {\n    var typeName = node.name.value;\n    var defNode = definedTypes[typeName];\n    var existingType = schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    var expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        var kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(new GraphQLError(\"Cannot extend non-\".concat(kindStr, \" type \\\"\").concat(typeName, \"\\\".\"), defNode ? [defNode, node] : node));\n      }\n    } else {\n      var allTypeNames = Object.keys(definedTypes);\n\n      if (schema) {\n        allTypeNames = allTypeNames.concat(Object.keys(schema.getTypeMap()));\n      }\n\n      var suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(new GraphQLError(\"Cannot extend type \\\"\".concat(typeName, \"\\\" because it is not defined.\") + didYouMean(suggestedTypes), node.name));\n    }\n  }\n}\nvar defKindToExtKind = (_defKindToExtKind = {}, _defineProperty(_defKindToExtKind, Kind.SCALAR_TYPE_DEFINITION, Kind.SCALAR_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.OBJECT_TYPE_DEFINITION, Kind.OBJECT_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.INTERFACE_TYPE_DEFINITION, Kind.INTERFACE_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.UNION_TYPE_DEFINITION, Kind.UNION_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.ENUM_TYPE_DEFINITION, Kind.ENUM_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.INPUT_OBJECT_TYPE_DEFINITION, Kind.INPUT_OBJECT_TYPE_EXTENSION), _defKindToExtKind);\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n  false || invariant(0, 'Unexpected type: ' + inspect(type));\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n  false || invariant(0, 'Unexpected kind: ' + inspect(kind));\n}\n","import inspect from \"../../jsutils/inspect.mjs\";\nimport invariant from \"../../jsutils/invariant.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { DirectiveLocation } from \"../../language/directiveLocation.mjs\";\nimport { specifiedDirectives } from \"../../type/directives.mjs\";\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n */\nexport function KnownDirectivesRule(context) {\n  var locationsMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {\n    var directive = definedDirectives[_i2];\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {\n    var def = astDefinitions[_i4];\n\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map(function (name) {\n        return name.value;\n      });\n    }\n  }\n\n  return {\n    Directive: function Directive(node, _key, _parent, _path, ancestors) {\n      var name = node.name.value;\n      var locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(new GraphQLError(\"Unknown directive \\\"@\".concat(name, \"\\\".\"), node));\n        return;\n      }\n\n      var candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && locations.indexOf(candidateLocation) === -1) {\n        context.reportError(new GraphQLError(\"Directive \\\"@\".concat(name, \"\\\" may not be used on \").concat(candidateLocation, \".\"), node));\n      }\n    }\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  var appliedTo = ancestors[ancestors.length - 1];\n  !Array.isArray(appliedTo) || invariant(0);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION:\n      {\n        var parentNode = ancestors[ancestors.length - 3];\n        return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION ? DirectiveLocation.INPUT_FIELD_DEFINITION : DirectiveLocation.ARGUMENT_DEFINITION;\n      }\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case 'query':\n      return DirectiveLocation.QUERY;\n\n    case 'mutation':\n      return DirectiveLocation.MUTATION;\n\n    case 'subscription':\n      return DirectiveLocation.SUBSCRIPTION;\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n  false || invariant(0, 'Unexpected operation: ' + inspect(operation));\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isTypeDefinitionNode, isTypeExtensionNode } from \"../../language/predicates.mjs\";\nimport { specifiedDirectives } from \"../../type/directives.mjs\";\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  var uniqueDirectiveMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {\n    var directive = definedDirectives[_i2];\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {\n    var def = astDefinitions[_i4];\n\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  var schemaDirectives = Object.create(null);\n  var typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      if (node.directives == null) {\n        return;\n      }\n\n      var seenDirectives;\n\n      if (node.kind === Kind.SCHEMA_DEFINITION || node.kind === Kind.SCHEMA_EXTENSION) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        var typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (var _i6 = 0, _node$directives2 = node.directives; _i6 < _node$directives2.length; _i6++) {\n        var _directive = _node$directives2[_i6];\n        var directiveName = _directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(new GraphQLError(\"The directive \\\"@\".concat(directiveName, \"\\\" can only be used once at this location.\"), [seenDirectives[directiveName], _directive]));\n          } else {\n            seenDirectives[directiveName] = _directive;\n          }\n        }\n      }\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n */\nexport function UniqueArgumentNamesRule(context) {\n  var knownArgNames = Object.create(null);\n  return {\n    Field: function Field() {\n      knownArgNames = Object.create(null);\n    },\n    Directive: function Directive() {\n      knownArgNames = Object.create(null);\n    },\n    Argument: function Argument(node) {\n      var argName = node.name.value;\n\n      if (knownArgNames[argName]) {\n        context.reportError(new GraphQLError(\"There can be only one argument named \\\"\".concat(argName, \"\\\".\"), [knownArgNames[argName], node.name]));\n      } else {\n        knownArgNames[argName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n */\nexport function UniqueInputFieldNamesRule(context) {\n  var knownNameStack = [];\n  var knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter: function enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n      leave: function leave() {\n        knownNames = knownNameStack.pop();\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(new GraphQLError(\"There can be only one input field named \\\"\".concat(fieldName, \"\\\".\"), [knownNames[fieldName], node.name]));\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isExecutableDefinitionNode } from \"../../language/predicates.mjs\";\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document: function Document(node) {\n      for (var _i2 = 0, _node$definitions2 = node.definitions; _i2 < _node$definitions2.length; _i2++) {\n        var definition = _node$definitions2[_i2];\n\n        if (!isExecutableDefinitionNode(definition)) {\n          var defName = definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : '\"' + definition.name.value + '\"';\n          context.reportError(new GraphQLError(\"The \".concat(defName, \" definition is not executable.\"), definition));\n        }\n      }\n\n      return false;\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n */\nexport function KnownFragmentNamesRule(context) {\n  return {\n    FragmentSpread: function FragmentSpread(node) {\n      var fragmentName = node.name.value;\n      var fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(new GraphQLError(\"Unknown fragment \\\"\".concat(fragmentName, \"\\\".\"), node.name));\n      }\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n */\nexport function NoUnusedFragmentsRule(context) {\n  var operationDefs = [];\n  var fragmentDefs = [];\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n    Document: {\n      leave: function leave() {\n        var fragmentNameUsed = Object.create(null);\n\n        for (var _i2 = 0; _i2 < operationDefs.length; _i2++) {\n          var operation = operationDefs[_i2];\n\n          for (var _i4 = 0, _context$getRecursive2 = context.getRecursivelyReferencedFragments(operation); _i4 < _context$getRecursive2.length; _i4++) {\n            var fragment = _context$getRecursive2[_i4];\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (var _i6 = 0; _i6 < fragmentDefs.length; _i6++) {\n          var fragmentDef = fragmentDefs[_i6];\n          var fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" is never used.\"), fragmentDef));\n          }\n        }\n      }\n    }\n  };\n}\n","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { specifiedDirectives } from \"../../type/directives.mjs\";\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n */\nexport function KnownArgumentNamesRule(context) {\n  return _objectSpread(_objectSpread({}, KnownArgumentNamesOnDirectivesRule(context)), {}, {\n    Argument: function Argument(argNode) {\n      var argDef = context.getArgument();\n      var fieldDef = context.getFieldDef();\n      var parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        var argName = argNode.name.value;\n        var knownArgsNames = fieldDef.args.map(function (arg) {\n          return arg.name;\n        });\n        var suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(new GraphQLError(\"Unknown argument \\\"\".concat(argName, \"\\\" on field \\\"\").concat(parentType.name, \".\").concat(fieldDef.name, \"\\\".\") + didYouMean(suggestions), argNode));\n      }\n    }\n  });\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  var directiveArgs = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {\n    var directive = definedDirectives[_i2];\n    directiveArgs[directive.name] = directive.args.map(function (arg) {\n      return arg.name;\n    });\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {\n    var def = astDefinitions[_i4];\n\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];\n      directiveArgs[def.name.value] = argsNodes.map(function (arg) {\n        return arg.name.value;\n      });\n    }\n  }\n\n  return {\n    Directive: function Directive(directiveNode) {\n      var directiveName = directiveNode.name.value;\n      var knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (var _i6 = 0, _directiveNode$argume2 = directiveNode.arguments; _i6 < _directiveNode$argume2.length; _i6++) {\n          var argNode = _directiveNode$argume2[_i6];\n          var argName = argNode.name.value;\n\n          if (knownArgs.indexOf(argName) === -1) {\n            var suggestions = suggestionList(argName, knownArgs);\n            context.reportError(new GraphQLError(\"Unknown argument \\\"\".concat(argName, \"\\\" on directive \\\"@\").concat(directiveName, \"\\\".\") + didYouMean(suggestions), argNode));\n          }\n        }\n      }\n\n      return false;\n    }\n  };\n}\n","import objectValues from \"../../polyfills/objectValues.mjs\";\nimport keyMap from \"../../jsutils/keyMap.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from \"../../type/definition.mjs\";\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n        var fieldDef = _objectValues2[_i2];\n        var fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(type.name, \".\").concat(fieldDef.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\"), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(node.name.value, \"\\\" is not defined by type \\\"\").concat(parentType.name, \"\\\".\") + didYouMean(suggestions), node));\n      }\n    },\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(inspect(type), \"\\\", found \").concat(print(node), \".\"), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      return isValidValueNode(context, node);\n    },\n    IntValue: function IntValue(node) {\n      return isValidValueNode(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidValueNode(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidValueNode(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidValueNode(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    var typeStr = inspect(locationType);\n    context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(typeStr, \"\\\", found \").concat(print(node), \".\"), node));\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (parseResult === undefined) {\n      var _typeStr = inspect(locationType);\n\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr, \"\\\", found \").concat(print(node), \".\"), node));\n    }\n  } catch (error) {\n    var _typeStr2 = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr2, \"\\\", found \").concat(print(node), \"; \") + error.message, node, undefined, undefined, undefined, error));\n    }\n  }\n}\n","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport keyMap from \"../../jsutils/keyMap.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { specifiedDirectives } from \"../../type/directives.mjs\";\nimport { isType, isRequiredArgument } from \"../../type/definition.mjs\";\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nexport function ProvidedRequiredArgumentsRule(context) {\n  return _objectSpread(_objectSpread({}, ProvidedRequiredArgumentsOnDirectivesRule(context)), {}, {\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n        var argNodes = (_fieldNode$arguments = fieldNode.arguments) !== null && _fieldNode$arguments !== void 0 ? _fieldNode$arguments : [];\n        var argNodeMap = keyMap(argNodes, function (arg) {\n          return arg.name.value;\n        });\n\n        for (var _i2 = 0, _fieldDef$args2 = fieldDef.args; _i2 < _fieldDef$args2.length; _i2++) {\n          var argDef = _fieldDef$args2[_i2];\n          var argNode = argNodeMap[argDef.name];\n\n          if (!argNode && isRequiredArgument(argDef)) {\n            var argTypeStr = inspect(argDef.type);\n            context.reportError(new GraphQLError(\"Field \\\"\".concat(fieldDef.name, \"\\\" argument \\\"\").concat(argDef.name, \"\\\" of type \\\"\").concat(argTypeStr, \"\\\" is required, but it was not provided.\"), fieldNode));\n          }\n        }\n      }\n    }\n  });\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var requiredArgsMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (var _i4 = 0; _i4 < definedDirectives.length; _i4++) {\n    var directive = definedDirectives[_i4];\n    requiredArgsMap[directive.name] = keyMap(directive.args.filter(isRequiredArgument), function (arg) {\n      return arg.name;\n    });\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  for (var _i6 = 0; _i6 < astDefinitions.length; _i6++) {\n    var def = astDefinitions[_i6];\n\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      var argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];\n      requiredArgsMap[def.name.value] = keyMap(argNodes.filter(isRequiredArgumentNode), function (arg) {\n        return arg.name.value;\n      });\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(directiveNode) {\n        var directiveName = directiveNode.name.value;\n        var requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n          var _argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];\n\n          var argNodeMap = keyMap(_argNodes, function (arg) {\n            return arg.name.value;\n          });\n\n          for (var _i8 = 0, _Object$keys2 = Object.keys(requiredArgs); _i8 < _Object$keys2.length; _i8++) {\n            var argName = _Object$keys2[_i8];\n\n            if (!argNodeMap[argName]) {\n              var argType = requiredArgs[argName].type;\n              var argTypeStr = isType(argType) ? inspect(argType) : print(argType);\n              context.reportError(new GraphQLError(\"Directive \\\"@\".concat(directiveName, \"\\\" argument \\\"\").concat(argName, \"\\\" of type \\\"\").concat(argTypeStr, \"\\\" is required, but it was not provided.\"), directiveNode));\n            }\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}\n","import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isNonNullType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nimport { isTypeSubTypeOf } from \"../../utilities/typeComparators.mjs\";\n\n/**\n * Variables passed to field arguments conform to type\n */\nexport function VariablesInAllowedPositionRule(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          var type = _ref2.type;\n          var defaultValue = _ref2.defaultValue;\n          var varName = node.name.value;\n          var varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            var schema = context.getSchema();\n            var varType = typeFromAST(schema, varDef.type);\n\n            if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n              var varTypeStr = inspect(varType);\n              var typeStr = inspect(type);\n              context.reportError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" of type \\\"\").concat(varTypeStr, \"\\\" used in position expecting type \\\"\").concat(typeStr, \"\\\".\"), [varDef, node]));\n            }\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    var hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    var nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n","import find from \"../../polyfills/find.mjs\";\nimport objectEntries from \"../../polyfills/objectEntries.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { getNamedType, isNonNullType, isLeafType, isObjectType, isListType, isInterfaceType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(function (_ref) {\n      var responseName = _ref[0],\n          subReason = _ref[1];\n      return \"subfields \\\"\".concat(responseName, \"\\\" conflict because \") + reasonMessage(subReason);\n    }).join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n */\n\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  var comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  var cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet: function SelectionSet(selectionSet) {\n      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);\n\n      for (var _i2 = 0; _i2 < conflicts.length; _i2++) {\n        var _ref3 = conflicts[_i2];\n        var _ref2$ = _ref3[0];\n        var responseName = _ref2$[0];\n        var reason = _ref2$[1];\n        var fields1 = _ref3[1];\n        var fields2 = _ref3[2];\n        var reasonMsg = reasonMessage(reason);\n        context.reportError(new GraphQLError(\"Fields \\\"\".concat(responseName, \"\\\" conflict because \").concat(reasonMsg, \". Use different aliases on the fields to fetch both if this was intentional.\"), fields1.concat(fields2)));\n      }\n    }\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),\n      fieldMap = _getFieldsAndFragment[0],\n      fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (var i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (var j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\n\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {\n  var fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),\n      fieldMap2 = _getReferencedFieldsA[0],\n      fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.\n\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (var i = 0; i < fragmentNames2.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\n\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n\n  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  var fragment1 = context.getFragment(fragmentName1);\n  var fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),\n      fieldMap1 = _getReferencedFieldsA2[0],\n      fragmentNames1 = _getReferencedFieldsA2[1];\n\n  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),\n      fieldMap2 = _getReferencedFieldsA3[0],\n      fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\n\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),\n      fieldMap1 = _getFieldsAndFragment2[0],\n      fragmentNames1 = _getFieldsAndFragment2[1];\n\n  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),\n      fieldMap2 = _getFieldsAndFragment3[0],\n      fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  if (fragmentNames2.length !== 0) {\n    for (var j = 0; j < fragmentNames2.length; j++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);\n    }\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n\n  if (fragmentNames1.length !== 0) {\n    for (var i = 0; i < fragmentNames1.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);\n    }\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n\n  for (var _i3 = 0; _i3 < fragmentNames1.length; _i3++) {\n    for (var _j = 0; _j < fragmentNames2.length; _j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i3], fragmentNames2[_j]);\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\n\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (var _i5 = 0, _objectEntries2 = objectEntries(fieldMap); _i5 < _objectEntries2.length; _i5++) {\n    var _ref5 = _objectEntries2[_i5];\n    var responseName = _ref5[0];\n    var fields = _ref5[1];\n\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (var i = 0; i < fields.length; i++) {\n        for (var j = i + 1; j < fields.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\n\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (var _i7 = 0, _Object$keys2 = Object.keys(fieldMap1); _i7 < _Object$keys2.length; _i7++) {\n    var responseName = _Object$keys2[_i7];\n    var fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      var fields1 = fieldMap1[responseName];\n\n      for (var i = 0; i < fields1.length; i++) {\n        for (var j = 0; j < fields2.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\n\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  var parentType1 = field1[0],\n      node1 = field1[1],\n      def1 = field1[2];\n  var parentType2 = field2[0],\n      node2 = field2[1],\n      def2 = field2[2]; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2);\n\n  if (!areMutuallyExclusive) {\n    var _node1$arguments, _node2$arguments;\n\n    // Two aliases must refer to the same field.\n    var name1 = node1.name.value;\n    var name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [[responseName, \"\\\"\".concat(name1, \"\\\" and \\\"\").concat(name2, \"\\\" are different fields\")], [node1], [node2]];\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    var args1 = (_node1$arguments = node1.arguments) !== null && _node1$arguments !== void 0 ? _node1$arguments : []; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n    var args2 = (_node2$arguments = node2.arguments) !== null && _node2$arguments !== void 0 ? _node2$arguments : []; // Two field calls must have the same arguments.\n\n    if (!sameArguments(args1, args2)) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  } // The return type for each field.\n\n\n  var type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  var type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, \"they return conflicting types \\\"\".concat(inspect(type1), \"\\\" and \\\"\").concat(inspect(type2), \"\\\"\")], [node1], [node2]];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n\n  var selectionSet1 = node1.selectionSet;\n  var selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n\n  return arguments1.every(function (argument1) {\n    var argument2 = find(arguments2, function (argument) {\n      return argument.name.value === argument1.name.value;\n    });\n\n    if (!argument2) {\n      return false;\n    }\n\n    return sameValue(argument1.value, argument2.value);\n  });\n}\n\nfunction sameValue(value1, value2) {\n  return print(value1) === print(value2);\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\n\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  var cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (!cached) {\n    var nodeAndDefs = Object.create(null);\n    var fragmentNames = Object.create(null);\n\n    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n\n    cached = [nodeAndDefs, Object.keys(fragmentNames)];\n    cachedFieldsAndFragmentNames.set(selectionSet, cached);\n  }\n\n  return cached;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\n\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  var fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\n\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (var _i9 = 0, _selectionSet$selecti2 = selectionSet.selections; _i9 < _selectionSet$selecti2.length; _i9++) {\n    var selection = _selectionSet$selecti2[_i9];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          var fieldName = selection.name.value;\n          var fieldDef = void 0;\n\n          if (isObjectType(parentType) || isInterfaceType(parentType)) {\n            fieldDef = parentType.getFields()[fieldName];\n          }\n\n          var responseName = selection.alias ? selection.alias.value : fieldName;\n\n          if (!nodeAndDefs[responseName]) {\n            nodeAndDefs[responseName] = [];\n          }\n\n          nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          var typeCondition = selection.typeCondition;\n          var inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;\n\n          _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n\n          break;\n        }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(function (_ref6) {\n      var reason = _ref6[0];\n      return reason;\n    })], conflicts.reduce(function (allFields, _ref7) {\n      var fields1 = _ref7[1];\n      return allFields.concat(fields1);\n    }, [node1]), conflicts.reduce(function (allFields, _ref8) {\n      var fields2 = _ref8[2];\n      return allFields.concat(fields2);\n    }, [node2])];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does\n * not matter. We do this by maintaining a sort of double adjacency sets.\n */\n\n\nvar PairSet = /*#__PURE__*/function () {\n  function PairSet() {\n    this._data = Object.create(null);\n  }\n\n  var _proto = PairSet.prototype;\n\n  _proto.has = function has(a, b, areMutuallyExclusive) {\n    var first = this._data[a];\n    var result = first && first[b];\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true,\n    // hence if we want to know if this PairSet \"has\" these two with no\n    // exclusivity, we have to ensure it was added as such.\n\n\n    if (areMutuallyExclusive === false) {\n      return result === false;\n    }\n\n    return true;\n  };\n\n  _proto.add = function add(a, b, areMutuallyExclusive) {\n    this._pairSetAdd(a, b, areMutuallyExclusive);\n\n    this._pairSetAdd(b, a, areMutuallyExclusive);\n  };\n\n  _proto._pairSetAdd = function _pairSetAdd(a, b, areMutuallyExclusive) {\n    var map = this._data[a];\n\n    if (!map) {\n      map = Object.create(null);\n      this._data[a] = map;\n    }\n\n    map[b] = areMutuallyExclusive;\n  };\n\n  return PairSet;\n}();\n","// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitionsRule } from \"./rules/ExecutableDefinitionsRule.mjs\"; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNamesRule } from \"./rules/UniqueOperationNamesRule.mjs\"; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperationRule } from \"./rules/LoneAnonymousOperationRule.mjs\"; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptionsRule } from \"./rules/SingleFieldSubscriptionsRule.mjs\"; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNamesRule } from \"./rules/KnownTypeNamesRule.mjs\"; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypesRule } from \"./rules/FragmentsOnCompositeTypesRule.mjs\"; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypesRule } from \"./rules/VariablesAreInputTypesRule.mjs\"; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafsRule } from \"./rules/ScalarLeafsRule.mjs\"; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectTypeRule } from \"./rules/FieldsOnCorrectTypeRule.mjs\"; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNamesRule } from \"./rules/UniqueFragmentNamesRule.mjs\"; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNamesRule } from \"./rules/KnownFragmentNamesRule.mjs\"; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragmentsRule } from \"./rules/NoUnusedFragmentsRule.mjs\"; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreadsRule } from \"./rules/PossibleFragmentSpreadsRule.mjs\"; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCyclesRule } from \"./rules/NoFragmentCyclesRule.mjs\"; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNamesRule } from \"./rules/UniqueVariableNamesRule.mjs\"; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariablesRule } from \"./rules/NoUndefinedVariablesRule.mjs\"; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariablesRule } from \"./rules/NoUnusedVariablesRule.mjs\"; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectivesRule } from \"./rules/KnownDirectivesRule.mjs\"; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocationRule } from \"./rules/UniqueDirectivesPerLocationRule.mjs\"; // Spec Section: \"Argument Names\"\n\nimport { KnownArgumentNamesRule, KnownArgumentNamesOnDirectivesRule } from \"./rules/KnownArgumentNamesRule.mjs\"; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNamesRule } from \"./rules/UniqueArgumentNamesRule.mjs\"; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectTypeRule } from \"./rules/ValuesOfCorrectTypeRule.mjs\"; // Spec Section: \"Argument Optionality\"\n\nimport { ProvidedRequiredArgumentsRule, ProvidedRequiredArgumentsOnDirectivesRule } from \"./rules/ProvidedRequiredArgumentsRule.mjs\"; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPositionRule } from \"./rules/VariablesInAllowedPositionRule.mjs\"; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMergedRule } from \"./rules/OverlappingFieldsCanBeMergedRule.mjs\"; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNamesRule } from \"./rules/UniqueInputFieldNamesRule.mjs\"; // SDL-specific validation rules\n\nimport { LoneSchemaDefinitionRule } from \"./rules/LoneSchemaDefinitionRule.mjs\";\nimport { UniqueOperationTypesRule } from \"./rules/UniqueOperationTypesRule.mjs\";\nimport { UniqueTypeNamesRule } from \"./rules/UniqueTypeNamesRule.mjs\";\nimport { UniqueEnumValueNamesRule } from \"./rules/UniqueEnumValueNamesRule.mjs\";\nimport { UniqueFieldDefinitionNamesRule } from \"./rules/UniqueFieldDefinitionNamesRule.mjs\";\nimport { UniqueDirectiveNamesRule } from \"./rules/UniqueDirectiveNamesRule.mjs\";\nimport { PossibleTypeExtensionsRule } from \"./rules/PossibleTypeExtensionsRule.mjs\";\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\nexport var specifiedRules = Object.freeze([ExecutableDefinitionsRule, UniqueOperationNamesRule, LoneAnonymousOperationRule, SingleFieldSubscriptionsRule, KnownTypeNamesRule, FragmentsOnCompositeTypesRule, VariablesAreInputTypesRule, ScalarLeafsRule, FieldsOnCorrectTypeRule, UniqueFragmentNamesRule, KnownFragmentNamesRule, NoUnusedFragmentsRule, PossibleFragmentSpreadsRule, NoFragmentCyclesRule, UniqueVariableNamesRule, NoUndefinedVariablesRule, NoUnusedVariablesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, KnownArgumentNamesRule, UniqueArgumentNamesRule, ValuesOfCorrectTypeRule, ProvidedRequiredArgumentsRule, VariablesInAllowedPositionRule, OverlappingFieldsCanBeMergedRule, UniqueInputFieldNamesRule]);\n/**\n * @internal\n */\n\nexport var specifiedSDLRules = Object.freeze([LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, KnownArgumentNamesOnDirectivesRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, ProvidedRequiredArgumentsOnDirectivesRule]);\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n */\nexport function UniqueOperationNamesRule(context) {\n  var knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      var operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(new GraphQLError(\"There can be only one operation named \\\"\".concat(operationName.value, \"\\\".\"), [knownOperationNames[operationName.value], operationName]));\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition() {\n      return false;\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\n\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n */\nexport function LoneAnonymousOperationRule(context) {\n  var operationCount = 0;\n  return {\n    Document: function Document(node) {\n      operationCount = node.definitions.filter(function (definition) {\n        return definition.kind === Kind.OPERATION_DEFINITION;\n      }).length;\n    },\n    OperationDefinition: function OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(new GraphQLError('This anonymous operation must be the only defined operation.', node));\n      }\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Subscriptions must only include one field.\n *\n * A GraphQL subscription is valid only if it contains a single root field.\n */\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        if (node.selectionSet.selections.length !== 1) {\n          context.reportError(new GraphQLError(node.name ? \"Subscription \\\"\".concat(node.name.value, \"\\\" must select only one top level field.\") : 'Anonymous Subscription must select only one top level field.', node.selectionSet.selections.slice(1)));\n        }\n      }\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        var type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          var typeStr = print(typeCondition);\n          context.reportError(new GraphQLError(\"Fragment cannot condition on non composite type \\\"\".concat(typeStr, \"\\\".\"), typeCondition));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        var typeStr = print(node.typeCondition);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(node.name.value, \"\\\" cannot condition on non composite type \\\"\").concat(typeStr, \"\\\".\"), node.typeCondition));\n      }\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isInputType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.type);\n\n      if (type && !isInputType(type)) {\n        var variableName = node.variable.name.value;\n        var typeName = print(node.type);\n        context.reportError(new GraphQLError(\"Variable \\\"$\".concat(variableName, \"\\\" cannot be non-input type \\\"\").concat(typeName, \"\\\".\"), node.type));\n      }\n    }\n  };\n}\n","import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { getNamedType, isLeafType } from \"../../type/definition.mjs\";\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getType();\n      var selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            var fieldName = node.name.value;\n            var typeStr = inspect(type);\n            context.reportError(new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" must not have a selection since type \\\"\").concat(typeStr, \"\\\" has no subfields.\"), selectionSet));\n          }\n        } else if (!selectionSet) {\n          var _fieldName = node.name.value;\n\n          var _typeStr = inspect(type);\n\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(_fieldName, \"\\\" of type \\\"\").concat(_typeStr, \"\\\" must have a selection of subfields. Did you mean \\\"\").concat(_fieldName, \" { ... }\\\"?\"), node));\n        }\n      }\n    }\n  };\n}\n","import arrayFrom from \"../../polyfills/arrayFrom.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport naturalCompare from \"../../jsutils/naturalCompare.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isObjectType, isInterfaceType, isAbstractType } from \"../../type/definition.mjs\";\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n\n      if (type) {\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          var suggestion = didYouMean('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n\n          context.reportError(new GraphQLError(\"Cannot query field \\\"\".concat(fieldName, \"\\\" on type \\\"\").concat(type.name, \"\\\".\") + suggestion, node));\n        }\n      }\n    }\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  var suggestedTypes = new Set();\n  var usageCount = Object.create(null);\n\n  for (var _i2 = 0, _schema$getPossibleTy2 = schema.getPossibleTypes(type); _i2 < _schema$getPossibleTy2.length; _i2++) {\n    var possibleType = _schema$getPossibleTy2[_i2];\n\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (var _i4 = 0, _possibleType$getInte2 = possibleType.getInterfaces(); _i4 < _possibleType$getInte2.length; _i4++) {\n      var _usageCount$possibleI;\n\n      var possibleInterface = _possibleType$getInte2[_i4];\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;\n    }\n  }\n\n  return arrayFrom(suggestedTypes).sort(function (typeA, typeB) {\n    // Suggest both interface and object types based on how common they are.\n    var usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n    if (usageCountDiff !== 0) {\n      return usageCountDiff;\n    } // Suggest super types first followed by subtypes\n\n\n    if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n      return -1;\n    }\n\n    if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n      return 1;\n    }\n\n    return naturalCompare(typeA.name, typeB.name);\n  }).map(function (x) {\n    return x.name;\n  });\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n\n  return [];\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n */\nexport function UniqueFragmentNamesRule(context) {\n  var knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(new GraphQLError(\"There can be only one fragment named \\\"\".concat(fragmentName, \"\\\".\"), [knownFragmentNames[fragmentName], node.name]));\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}\n","import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nimport { doTypesOverlap } from \"../../utilities/typeComparators.mjs\";\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var fragType = context.getType();\n      var parentType = context.getParentType();\n\n      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment cannot be spread here as objects of type \\\"\".concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var fragName = node.name.value;\n      var fragType = getFragmentType(context, fragName);\n      var parentType = context.getParentType();\n\n      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" cannot be spread here as objects of type \\\"\").concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    }\n  };\n}\n\nfunction getFragmentType(context, name) {\n  var frag = context.getFragment(name);\n\n  if (frag) {\n    var type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  var spreadPath = []; // Position in the spread path\n\n  var spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    }\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var _i2 = 0; _i2 < spreadNodes.length; _i2++) {\n      var spreadNode = spreadNodes[_i2];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        var spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        var viaPath = cyclePath.slice(0, -1).map(function (s) {\n          return '\"' + s.name.value + '\"';\n        }).join(', ');\n        context.reportError(new GraphQLError(\"Cannot spread fragment \\\"\".concat(spreadName, \"\\\" within itself\") + (viaPath !== '' ? \" via \".concat(viaPath, \".\") : '.'), cyclePath));\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nexport function UniqueVariableNamesRule(context) {\n  var knownVariableNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      knownVariableNames = Object.create(null);\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      var variableName = node.variable.name.value;\n\n      if (knownVariableNames[variableName]) {\n        context.reportError(new GraphQLError(\"There can be only one variable named \\\"$\".concat(variableName, \"\\\".\"), [knownVariableNames[variableName], node.variable.name]));\n      } else {\n        knownVariableNames[variableName] = node.variable.name;\n      }\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n */\nexport function NoUndefinedVariablesRule(context) {\n  var variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableNameDefined = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          var varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(new GraphQLError(operation.name ? \"Variable \\\"$\".concat(varName, \"\\\" is not defined by operation \\\"\").concat(operation.name.value, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is not defined.\"), [node, operation]));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    }\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\nexport function NoUnusedVariablesRule(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (var _i4 = 0, _variableDefs2 = variableDefs; _i4 < _variableDefs2.length; _i4++) {\n          var variableDef = _variableDefs2[_i4];\n          var variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(operation.name ? \"Variable \\\"$\".concat(variableName, \"\\\" is never used in operation \\\"\").concat(operation.name.value, \"\\\".\") : \"Variable \\\"$\".concat(variableName, \"\\\" is never used.\"), variableDef));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}\n","function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nimport { Kind } from \"../language/kinds.mjs\";\nimport { visit } from \"../language/visitor.mjs\";\nimport { TypeInfo, visitWithTypeInfo } from \"../utilities/TypeInfo.mjs\";\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport var ASTValidationContext = /*#__PURE__*/function () {\n  function ASTValidationContext(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  var _proto = ASTValidationContext.prototype;\n\n  _proto.reportError = function reportError(error) {\n    this._onError(error);\n  };\n\n  _proto.getDocument = function getDocument() {\n    return this._ast;\n  };\n\n  _proto.getFragment = function getFragment(name) {\n    var fragments = this._fragments;\n\n    if (!fragments) {\n      this._fragments = fragments = this.getDocument().definitions.reduce(function (frags, statement) {\n        if (statement.kind === Kind.FRAGMENT_DEFINITION) {\n          frags[statement.name.value] = statement;\n        }\n\n        return frags;\n      }, Object.create(null));\n    }\n\n    return fragments[name];\n  };\n\n  _proto.getFragmentSpreads = function getFragmentSpreads(node) {\n    var spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      var setsToVisit = [node];\n\n      while (setsToVisit.length !== 0) {\n        var set = setsToVisit.pop();\n\n        for (var _i2 = 0, _set$selections2 = set.selections; _i2 < _set$selections2.length; _i2++) {\n          var selection = _set$selections2[_i2];\n\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  };\n\n  _proto.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {\n    var fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      var collectedNames = Object.create(null);\n      var nodesToVisit = [operation.selectionSet];\n\n      while (nodesToVisit.length !== 0) {\n        var node = nodesToVisit.pop();\n\n        for (var _i4 = 0, _this$getFragmentSpre2 = this.getFragmentSpreads(node); _i4 < _this$getFragmentSpre2.length; _i4++) {\n          var spread = _this$getFragmentSpre2[_i4];\n          var fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            var fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  };\n\n  return ASTValidationContext;\n}();\nexport var SDLValidationContext = /*#__PURE__*/function (_ASTValidationContext) {\n  _inheritsLoose(SDLValidationContext, _ASTValidationContext);\n\n  function SDLValidationContext(ast, schema, onError) {\n    var _this;\n\n    _this = _ASTValidationContext.call(this, ast, onError) || this;\n    _this._schema = schema;\n    return _this;\n  }\n\n  var _proto2 = SDLValidationContext.prototype;\n\n  _proto2.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  return SDLValidationContext;\n}(ASTValidationContext);\nexport var ValidationContext = /*#__PURE__*/function (_ASTValidationContext2) {\n  _inheritsLoose(ValidationContext, _ASTValidationContext2);\n\n  function ValidationContext(schema, ast, typeInfo, onError) {\n    var _this2;\n\n    _this2 = _ASTValidationContext2.call(this, ast, onError) || this;\n    _this2._schema = schema;\n    _this2._typeInfo = typeInfo;\n    _this2._variableUsages = new Map();\n    _this2._recursiveVariableUsages = new Map();\n    return _this2;\n  }\n\n  var _proto3 = ValidationContext.prototype;\n\n  _proto3.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  _proto3.getVariableUsages = function getVariableUsages(node) {\n    var usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      var newUsages = [];\n      var typeInfo = new TypeInfo(this._schema);\n      visit(node, visitWithTypeInfo(typeInfo, {\n        VariableDefinition: function VariableDefinition() {\n          return false;\n        },\n        Variable: function Variable(variable) {\n          newUsages.push({\n            node: variable,\n            type: typeInfo.getInputType(),\n            defaultValue: typeInfo.getDefaultValue()\n          });\n        }\n      }));\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  };\n\n  _proto3.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {\n    var usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (var _i6 = 0, _this$getRecursivelyR2 = this.getRecursivelyReferencedFragments(operation); _i6 < _this$getRecursivelyR2.length; _i6++) {\n        var frag = _this$getRecursivelyR2[_i6];\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  };\n\n  _proto3.getType = function getType() {\n    return this._typeInfo.getType();\n  };\n\n  _proto3.getParentType = function getParentType() {\n    return this._typeInfo.getParentType();\n  };\n\n  _proto3.getInputType = function getInputType() {\n    return this._typeInfo.getInputType();\n  };\n\n  _proto3.getParentInputType = function getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  };\n\n  _proto3.getFieldDef = function getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  };\n\n  _proto3.getDirective = function getDirective() {\n    return this._typeInfo.getDirective();\n  };\n\n  _proto3.getArgument = function getArgument() {\n    return this._typeInfo.getArgument();\n  };\n\n  _proto3.getEnumValue = function getEnumValue() {\n    return this._typeInfo.getEnumValue();\n  };\n\n  return ValidationContext;\n}(ASTValidationContext);\n","import devAssert from \"../jsutils/devAssert.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { visit, visitInParallel } from \"../language/visitor.mjs\";\nimport { assertValidSchema } from \"../type/validate.mjs\";\nimport { TypeInfo, visitWithTypeInfo } from \"../utilities/TypeInfo.mjs\";\nimport { specifiedRules, specifiedSDLRules } from \"./specifiedRules.mjs\";\nimport { SDLValidationContext, ValidationContext } from \"./ValidationContext.mjs\";\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n\nexport function validate(schema, documentAST) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedRules;\n  var typeInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new TypeInfo(schema);\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n    maxErrors: undefined\n  };\n  documentAST || devAssert(0, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  assertValidSchema(schema);\n  var abortObj = Object.freeze({});\n  var errors = [];\n  var context = new ValidationContext(schema, documentAST, typeInfo, function (error) {\n    if (options.maxErrors != null && errors.length >= options.maxErrors) {\n      errors.push(new GraphQLError('Too many validation errors, error limit reached. Validation aborted.'));\n      throw abortObj;\n    }\n\n    errors.push(error);\n  }); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  var visitor = visitInParallel(rules.map(function (rule) {\n    return rule(context);\n  })); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nexport function validateSDL(documentAST, schemaToExtend) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedSDLRules;\n  var errors = [];\n  var context = new SDLValidationContext(documentAST, schemaToExtend, function (error) {\n    errors.push(error);\n  });\n  var visitors = rules.map(function (rule) {\n    return rule(context);\n  });\n  visit(documentAST, visitInParallel(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDL(documentAST) {\n  var errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDLExtension(documentAST, schema) {\n  var errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n","import invariant from \"../../../jsutils/invariant.mjs\";\nimport { GraphQLError } from \"../../../error/GraphQLError.mjs\";\nimport { getNamedType, isInputObjectType } from \"../../../type/definition.mjs\";\n\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\nexport function NoDeprecatedCustomRule(context) {\n  return {\n    Field: function Field(node) {\n      var fieldDef = context.getFieldDef();\n      var deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;\n\n      if (fieldDef && deprecationReason != null) {\n        var parentType = context.getParentType();\n        parentType != null || invariant(0);\n        context.reportError(new GraphQLError(\"The field \".concat(parentType.name, \".\").concat(fieldDef.name, \" is deprecated. \").concat(deprecationReason), node));\n      }\n    },\n    Argument: function Argument(node) {\n      var argDef = context.getArgument();\n      var deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;\n\n      if (argDef && deprecationReason != null) {\n        var directiveDef = context.getDirective();\n\n        if (directiveDef != null) {\n          context.reportError(new GraphQLError(\"Directive \\\"@\".concat(directiveDef.name, \"\\\" argument \\\"\").concat(argDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n        } else {\n          var parentType = context.getParentType();\n          var fieldDef = context.getFieldDef();\n          parentType != null && fieldDef != null || invariant(0);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(parentType.name, \".\").concat(fieldDef.name, \"\\\" argument \\\"\").concat(argDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var inputObjectDef = getNamedType(context.getParentInputType());\n\n      if (isInputObjectType(inputObjectDef)) {\n        var inputFieldDef = inputObjectDef.getFields()[node.name.value]; // flowlint-next-line unnecessary-optional-chain:off\n\n        var deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;\n\n        if (deprecationReason != null) {\n          context.reportError(new GraphQLError(\"The input field \".concat(inputObjectDef.name, \".\").concat(inputFieldDef.name, \" is deprecated. \").concat(deprecationReason), node));\n        }\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var enumValueDef = context.getEnumValue();\n      var deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;\n\n      if (enumValueDef && deprecationReason != null) {\n        var enumTypeDef = getNamedType(context.getInputType());\n        enumTypeDef != null || invariant(0);\n        context.reportError(new GraphQLError(\"The enum value \\\"\".concat(enumTypeDef.name, \".\").concat(enumValueDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n      }\n    }\n  };\n}\n","import { specifiedRules, validate, NoUnusedFragmentsRule, KnownFragmentNamesRule, Kind, ExecutableDefinitionsRule, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, } from 'graphql';\nconst specifiedSDLRules = [\n    LoneSchemaDefinitionRule,\n    UniqueOperationTypesRule,\n    UniqueTypeNamesRule,\n    UniqueEnumValueNamesRule,\n    UniqueFieldDefinitionNamesRule,\n    UniqueDirectiveNamesRule,\n    KnownTypeNamesRule,\n    KnownDirectivesRule,\n    UniqueDirectivesPerLocationRule,\n    PossibleTypeExtensionsRule,\n    UniqueArgumentNamesRule,\n    UniqueInputFieldNamesRule,\n];\nexport function validateWithCustomRules(schema, ast, customRules, isRelayCompatMode, isSchemaDocument) {\n    const rules = specifiedRules.filter(rule => {\n        if (rule === NoUnusedFragmentsRule || rule === ExecutableDefinitionsRule) {\n            return false;\n        }\n        if (isRelayCompatMode && rule === KnownFragmentNamesRule) {\n            return false;\n        }\n        return true;\n    });\n    if (customRules) {\n        Array.prototype.push.apply(rules, customRules);\n    }\n    if (isSchemaDocument) {\n        Array.prototype.push.apply(rules, specifiedSDLRules);\n    }\n    const errors = validate(schema, ast, rules);\n    return errors.filter(error => {\n        if (error.message.includes('Unknown directive') && error.nodes) {\n            const node = error.nodes[0];\n            if (node && node.kind === Kind.DIRECTIVE) {\n                const name = node.name.value;\n                if (name === 'arguments' || name === 'argumentDefinitions') {\n                    return false;\n                }\n            }\n        }\n        return true;\n    });\n}\n//# sourceMappingURL=validateWithCustomRules.js.map","import { GraphQLError, print, validate, NoDeprecatedCustomRule, parse, } from 'graphql';\nimport { CharacterStream, onlineParser } from '../parser';\nimport { Range, validateWithCustomRules, Position } from '../utils';\nexport const SEVERITY = {\n    Error: 'Error',\n    Warning: 'Warning',\n    Information: 'Information',\n    Hint: 'Hint',\n};\nexport const DIAGNOSTIC_SEVERITY = {\n    [SEVERITY.Error]: 1,\n    [SEVERITY.Warning]: 2,\n    [SEVERITY.Information]: 3,\n    [SEVERITY.Hint]: 4,\n};\nconst invariant = (condition, message) => {\n    if (!condition) {\n        throw new Error(message);\n    }\n};\nexport function getDiagnostics(query, schema = null, customRules, isRelayCompatMode, externalFragments) {\n    var _a, _b;\n    let ast = null;\n    let fragments = '';\n    if (externalFragments) {\n        fragments =\n            typeof externalFragments === 'string'\n                ? externalFragments\n                : externalFragments.reduce((acc, node) => acc + print(node) + '\\n\\n', '');\n    }\n    const enhancedQuery = fragments ? `${query}\\n\\n${fragments}` : query;\n    try {\n        ast = parse(enhancedQuery);\n    }\n    catch (error) {\n        if (error instanceof GraphQLError) {\n            const range = getRange((_b = (_a = error.locations) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : { line: 0, column: 0 }, enhancedQuery);\n            return [\n                {\n                    severity: DIAGNOSTIC_SEVERITY.Error,\n                    message: error.message,\n                    source: 'GraphQL: Syntax',\n                    range,\n                },\n            ];\n        }\n        throw error;\n    }\n    return validateQuery(ast, schema, customRules, isRelayCompatMode);\n}\nexport function validateQuery(ast, schema = null, customRules, isRelayCompatMode) {\n    if (!schema) {\n        return [];\n    }\n    const validationErrorAnnotations = validateWithCustomRules(schema, ast, customRules, isRelayCompatMode).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Error, 'Validation'));\n    const deprecationWarningAnnotations = validate(schema, ast, [\n        NoDeprecatedCustomRule,\n    ]).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Warning, 'Deprecation'));\n    return validationErrorAnnotations.concat(deprecationWarningAnnotations);\n}\nfunction annotations(error, severity, type) {\n    if (!error.nodes) {\n        return [];\n    }\n    const highlightedNodes = [];\n    error.nodes.forEach((node, i) => {\n        const highlightNode = node.kind !== 'Variable' && 'name' in node && node.name !== undefined\n            ? node.name\n            : 'variable' in node && node.variable !== undefined\n                ? node.variable\n                : node;\n        if (highlightNode) {\n            invariant(error.locations, 'GraphQL validation error requires locations.');\n            const loc = error.locations[i];\n            const highlightLoc = getLocation(highlightNode);\n            const end = loc.column + (highlightLoc.end - highlightLoc.start);\n            highlightedNodes.push({\n                source: `GraphQL: ${type}`,\n                message: error.message,\n                severity,\n                range: new Range(new Position(loc.line - 1, loc.column - 1), new Position(loc.line - 1, end)),\n            });\n        }\n    });\n    return highlightedNodes;\n}\nexport function getRange(location, queryText) {\n    const parser = onlineParser();\n    const state = parser.startState();\n    const lines = queryText.split('\\n');\n    invariant(lines.length >= location.line, 'Query text must have more lines than where the error happened');\n    let stream = null;\n    for (let i = 0; i < location.line; i++) {\n        stream = new CharacterStream(lines[i]);\n        while (!stream.eol()) {\n            const style = parser.token(stream, state);\n            if (style === 'invalidchar') {\n                break;\n            }\n        }\n    }\n    invariant(stream, 'Expected Parser stream to be available.');\n    const line = location.line - 1;\n    const start = stream.getStartOfToken();\n    const end = stream.getCurrentPosition();\n    return new Range(new Position(line, start), new Position(line, end));\n}\nfunction getLocation(node) {\n    const typeCastedNode = node;\n    const location = typeCastedNode.loc;\n    invariant(location, 'Expected ASTNode to have a location.');\n    return location;\n}\n//# sourceMappingURL=getDiagnostics.js.map","import CodeMirror from 'codemirror';\nimport { getDiagnostics } from 'graphql-language-service';\nconst SEVERITY = ['error', 'warning', 'information', 'hint'];\nconst TYPE = {\n    'GraphQL: Validation': 'validation',\n    'GraphQL: Deprecation': 'deprecation',\n    'GraphQL: Syntax': 'syntax',\n};\nCodeMirror.registerHelper('lint', 'graphql', (text, options) => {\n    const { schema, validationRules, externalFragments } = options;\n    const rawResults = getDiagnostics(text, schema, validationRules, undefined, externalFragments);\n    const results = rawResults.map(error => ({\n        message: error.message,\n        severity: error.severity ? SEVERITY[error.severity - 1] : SEVERITY[0],\n        type: error.source ? TYPE[error.source] : undefined,\n        from: CodeMirror.Pos(error.range.start.line, error.range.start.character),\n        to: CodeMirror.Pos(error.range.end.line, error.range.end.character),\n    }));\n    return results;\n});\n//# sourceMappingURL=lint.js.map"],"names":["Range","start","end","this","containsPosition","position","line","character","Position","__name","lessThanOrEqualTo","LoneSchemaDefinitionRule","context","_ref","_ref2","_oldSchema$astNode","oldSchema","getSchema","alreadyDefined","astNode","getQueryType","getMutationType","getSubscriptionType","schemaDefinitionsCount","SchemaDefinition","node","reportError","GraphQLError","UniqueOperationTypesRule","schema","definedOperationTypes","Object","create","existingOperationTypes","query","mutation","subscription","checkOperationTypes","SchemaExtension","_node$operationTypes","operationTypesNodes","operationTypes","_i2","length","operationType","operation","alreadyDefinedOperationType","concat","UniqueTypeNamesRule","knownTypeNames","ScalarTypeDefinition","checkTypeName","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","InputObjectTypeDefinition","typeName","name","value","getType","UniqueEnumValueNamesRule","existingTypeMap","getTypeMap","knownValueNames","checkValueUniqueness","EnumTypeExtension","_node$values","valueNodes","values","valueNames","valueDef","valueName","existingType","isEnumType","getValue","UniqueFieldDefinitionNamesRule","knownFieldNames","checkFieldUniqueness","InputObjectTypeExtension","InterfaceTypeExtension","ObjectTypeExtension","_node$fields","fieldNodes","fields","fieldNames","fieldDef","fieldName","hasField","type","isObjectType","isInterfaceType","isInputObjectType","getFields","UniqueDirectiveNamesRule","knownDirectiveNames","DirectiveDefinition","directiveName","getDirective","isExecutableDefinitionNode","kind","Kind","isTypeSystemDefinitionNode","isTypeDefinitionNode","isTypeSystemExtensionNode","isTypeExtensionNode","KnownTypeNamesRule","existingTypesMap","definedTypes","_context$getDocument$2","getDocument","definitions","def","typeNames","keys","NamedType","_1","parent","_2","ancestors","_ancestors$","definitionNode","isSDL","Array","isArray","standardTypeNames","indexOf","isStandardTypeName","suggestedTypes","suggestionList","didYouMean","specifiedScalarTypes","introspectionTypes","map","_defKindToExtKind","KnownDirectivesRule","locationsMap","definedDirectives","getDirectives","specifiedDirectives","directive","locations","astDefinitions","_i4","Directive","_key","_parent","_path","candidateLocation","appliedTo","invariant","DirectiveLocation","inspect","getDirectiveLocationForOperation","getDirectiveLocationForASTPath","UniqueDirectivesPerLocationRule","uniqueDirectiveMap","isRepeatable","repeatable","schemaDirectives","typeDirectivesMap","enter","directives","seenDirectives","undefined","_i6","_node$directives2","_directive","_defineProperty","obj","key","defineProperty","enumerable","configurable","writable","PossibleTypeExtensionsRule","ScalarTypeExtension","checkExtension","UnionTypeExtension","expectedKind","defNode","defKindToExtKind","isScalarType","isUnionType","typeToExtKind","kindStr","extensionKindToTypeName","allTypeNames","UniqueArgumentNamesRule","knownArgNames","Field","Argument","argName","UniqueInputFieldNamesRule","knownNameStack","knownNames","ObjectValue","push","leave","pop","ObjectField","ExecutableDefinitionsRule","Document","_node$definitions2","definition","defName","KnownFragmentNamesRule","FragmentSpread","fragmentName","getFragment","NoUnusedFragmentsRule","operationDefs","fragmentDefs","OperationDefinition","FragmentDefinition","fragmentNameUsed","_context$getRecursive2","getRecursivelyReferencedFragments","fragmentDef","fragName","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","apply","_objectSpread","target","i","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","KnownArgumentNamesOnDirectivesRule","directiveArgs","args","arg","_def$arguments","argsNodes","directiveNode","knownArgs","_directiveNode$argume2","argNode","suggestions","isValidValueNode","locationType","getInputType","getNamedType","isLeafType","parseLiteral","_typeStr","print","error","_typeStr2","message","typeStr","ProvidedRequiredArgumentsOnDirectivesRule","requiredArgsMap","keyMap","isRequiredArgument","argNodes","isRequiredArgumentNode","requiredArgs","_directiveNode$argume","_argNodes","argNodeMap","_i8","_Object$keys2","argType","argTypeStr","isType","defaultValue","allowedVariableUsage","varType","varDefaultValue","locationDefaultValue","isNonNullType","nullableLocationType","ofType","isTypeSubTypeOf","reasonMessage","reason","responseName","subReason","join","collectConflictsBetweenFieldsAndFragment","conflicts","cachedFieldsAndFragmentNames","comparedFragmentPairs","areMutuallyExclusive","fieldMap","fragment","_getReferencedFieldsA","getReferencedFieldsAndFragmentNames","fieldMap2","fragmentNames2","collectConflictsBetween","collectConflictsBetweenFragments","fragmentName1","fragmentName2","has","add","fragment1","fragment2","_getReferencedFieldsA2","fieldMap1","fragmentNames1","_getReferencedFieldsA3","j","parentFieldsAreMutuallyExclusive","_i7","fields2","fields1","conflict","findConflict","field1","field2","parentType1","node1","def1","parentType2","node2","def2","_node1$arguments","_node2$arguments","name1","name2","arguments1","arguments2","every","argument1","value1","value2","argument2","find","argument","sameArguments","type1","type2","doTypesConflict","selectionSet1","selectionSet","selectionSet2","_getFieldsAndFragment2","getFieldsAndFragmentNames","_getFieldsAndFragment3","_i3","_j","findConflictsBetweenSubSelectionSets","_ref6","reduce","allFields","_ref7","_ref8","subfieldConflicts","isListType","parentType","cached","get","nodeAndDefs","fragmentNames","_collectFieldsAndFragmentNames","set","fragmentType","typeFromAST","typeCondition","_i9","_selectionSet$selecti2","selections","selection","alias","inlineFragmentType","PairSet","_data","_proto","prototype","a","b","first","result","_pairSetAdd","specifiedRules","freeze","knownOperationNames","operationName","operationCount","slice","InlineFragment","isCompositeType","VariableDefinition","isInputType","variableName","variable","_fieldName","getParentType","getFieldDef","suggestion","isAbstractType","Set","usageCount","_schema$getPossibleTy2","getPossibleTypes","possibleType","_possibleType$getInte2","getInterfaces","_usageCount$possibleI","possibleInterface","arrayFrom","sort","typeA","typeB","usageCountDiff","isSubType","naturalCompare","x","getSuggestedTypeNames","possibleFieldNames","getSuggestedFieldNames","knownFragmentNames","fragType","doTypesOverlap","parentTypeStr","fragTypeStr","frag","getFragmentType","visitedFrags","spreadPath","spreadPathIndexByName","detectCycleRecursive","spreadNodes","getFragmentSpreads","spreadNode","spreadName","cycleIndex","spreadFragment","cyclePath","viaPath","s","knownVariableNames","variableNameDefined","usages","getRecursiveVariableUsages","varName","variableDefs","variableNameUsed","_variableDefs2","variableDef","argDef","getArgument","knownArgsNames","ListValue","getNullableType","getParentInputType","fieldNodeMap","field","_objectValues2","objectValues","isRequiredInputField","NullValue","EnumValue","IntValue","FloatValue","StringValue","BooleanValue","fieldNode","_fieldNode$arguments","_fieldDef$args2","varDefMap","varDef","varTypeStr","Map","SelectionSet","_getFieldsAndFragment","_i5","_objectEntries2","objectEntries","_ref5","collectConflictsWithin","findConflictsWithinSelectionSet","_ref3","_ref2$","reasonMsg","_inheritsLoose","subClass","superClass","constructor","__proto__","ASTValidationContext","ast","onError","_ast","_fragments","_fragmentSpreads","_recursivelyReferencedFragments","_onError","fragments","frags","statement","spreads","setsToVisit","_set$selections2","collectedNames","nodesToVisit","_this$getFragmentSpre2","ValidationContext","_ASTValidationContext2","typeInfo","_this2","call","_schema","_typeInfo","_variableUsages","_recursiveVariableUsages","_proto3","getVariableUsages","newUsages","TypeInfo","visit","visitWithTypeInfo","Variable","getDefaultValue","_this$getRecursivelyR2","getEnumValue","validate","documentAST","rules","options","maxErrors","devAssert","assertValidSchema","abortObj","errors","visitor","visitInParallel","rule","e","NoDeprecatedCustomRule","deprecationReason","directiveDef","inputObjectDef","inputFieldDef","enumValueDef","enumTypeDef","specifiedSDLRules","validateWithCustomRules","customRules","isRelayCompatMode","isSchemaDocument","includes","nodes","SEVERITY","DIAGNOSTIC_SEVERITY","condition","Error","getDiagnostics","_a","_b","externalFragments","acc","enhancedQuery","parse","range","getRange","column","severity","validateQuery","validationErrorAnnotations","flatMap","annotations","deprecationWarningAnnotations","Warning","highlightedNodes","highlightNode","loc","highlightLoc","getLocation","location","queryText","parser","onlineParser","state","startState","lines","split","stream","CharacterStream","eol","token","getStartOfToken","getCurrentPosition","TYPE","CodeMirror","text","validationRules","from","to"],"sourceRoot":""}