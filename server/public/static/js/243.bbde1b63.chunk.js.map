{"version":3,"file":"static/js/243.bbde1b63.chunk.js","mappings":"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","sources":["../node_modules/node_modules/codemirror/mode/javascript/javascript.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var trackScope = parserConfig.trackScope !== false\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    if (!trackScope) return false\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (!trackScope) return\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  pushcontext.lex = pushblockcontext.lex = true\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") { return pass(quasiType, afterType); }\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\") return cont(classfield)\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null))\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/x-json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/manifest+json\", { name: \"javascript\", json: true })\nCodeMirror.defineMIME(\"application/ld+json\", { name: \"javascript\", jsonld: true });\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n"],"names":["mod","CodeMirror","require$$0","defineMode","config","parserConfig","type","content","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","trackScope","isTS","typescript","wordRE","wordCharacters","keywords","type2","style","__name","A","kw","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","stream","next","escaped","inSet","tp","cont2","state","ch","tokenize","tokenString","match","ret","test","eat","tokenComment","skipToEnd","expressionAllowed","readRegexp","current","tokenQuasi","peek","eatWhile","string","slice","start","lexical","word","lastType","propertyIsEnumerable","quote","tokenBase","maybeEnd","brackets","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","indented","column","align","prev","info","this","varname","v","localVars","name","cx2","context","vars","content2","cc","cx","marked","hasOwnProperty","length","pop","expression","statement","lex","inScope","i","arguments","push","pass","apply","list","block","newContext","registerVarScoped","inList","Var","globalVars","inner","Context","block2","defaultVars","result","indent","outer","JSLexical","wanted","cont","exp","value","pushlex","vardef","expect","poplex","parenExpr","maybeexpression","pushblockcontext","popcontext","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","maybelabel","pushcontext","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","classExpression","expressionNoComma","arrayLiteral","contCommasep","objprop","quasi","maybeTarget","me","expr","property","backUp","continueQuasi","findFatArrow","targetNoComma","target","maybeTypeArgs","_","getterSetter","afterprop","isModifier","maybetype","what","end","sep","type3","value2","proceed","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","maybetypeOrIn","functiondecl","continueQuasiType","maybeTypeDefault","maybeAssign","vardefCont","register","eltpattern","proppattern","_type","forspec1","forspec2","mayberettype","typeparam","classNameAfter","classBody","classfield","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","textAfter","startState","basecolumn","token","sol","indentation","eatSpace","parseJS","Pass","top","firstChar","c","closing","isContinuedStatement","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","StringStream","registerHelper","defineMIME"],"sourceRoot":""}